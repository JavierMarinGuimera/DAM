package pojos;
// Generated 21 feb. 2022 17:59:07 by Hibernate Tools 5.6.3.Final

import java.util.ArrayList;
import java.util.List;

/**
 * Usuaris generated by hbm2java
 */
public class Usuaris implements java.io.Serializable {

	private int userid;
	private String pwd;
	private String nom;
	private String cognoms;
	private String email;

	public Usuaris() {
	}

	public Usuaris(int userid, String pwd) {
		this.userid = userid;
		this.pwd = pwd;
	}

	public Usuaris(int userid, String pwd, String nom, String cognoms, String email) {
		this.userid = userid;
		this.pwd = pwd;
		this.nom = nom;
		this.cognoms = cognoms;
		this.email = email;
	}

	public int getUserid() {
		return this.userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getPwd() {
		return this.pwd;
	}

	public void setPwd(String pwd) {
		this.pwd = pwd;
	}

	public String getNom() {
		return this.nom;
	}

	public void setNom(String nom) {
		this.nom = nom;
	}

	public String getCognoms() {
		return this.cognoms;
	}

	public void setCognoms(String cognoms) {
		this.cognoms = cognoms;
	}

	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Override
	public String toString() {
		return (this != null ? "{" +
				" userid='" + getUserid() + "'" +
				", pwd='" + getPwd() + "'" +
				", nom='" + getNom() + "'" +
				", cognoms='" + getCognoms() + "'" +
				", email='" + getEmail() + "'" +
				"}" : "Usuario no encontrado.");
	}

	/**
	 * ANSWER METHODS. Receives a boolean with the answer of the query. True if
	 * worked, false if doesnt.
	 * 
	 * @param boolean
	 */
	public static void isCreated(Boolean created) {
		System.out.println("Usuario " + (created ? "" : "no ") + "creado.\n");
	}

	public static void isUpdated(Boolean updated) {
		System.out.println("Usuario " + (updated ? "" : "no ") + "actualizado.\n");
	}

	public static void isDeleted(Boolean deleted) {
		System.out.println("Usuario " + (deleted ? "" : "no ") + "eliminado.\n");
	}

	/**
	 * Receives a list of user to print them.
	 * 
	 * @param users
	 */
	public static void printUsersFromList(List<Usuaris> users) {
		for (Usuaris user : users) {
			System.out.println(user);
		}
	}

	/**
	 * Encapsulates de user in a list of them to reuse the method above.
	 * 
	 * @param user
	 */
	public static void printUser(Usuaris user) {
		List<Usuaris> userAsList = new ArrayList<>();
		userAsList.add(user);
		printUsersFromList(userAsList);
	}
}
